trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  ARM_CLIENT_ID: $(servicePrincipalId)
  ARM_CLIENT_SECRET: $(servicePrincipalKey)
  ARM_SUBSCRIPTION_ID: $(subscriptionId)
  ARM_TENANT_ID: $(tenantId)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- task: AzureCLI@2
  inputs:
    azureSubscription: 'azure-spn'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
      az account set --subscription $(ARM_SUBSCRIPTION_ID)

- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    backendServiceArm: 'azure-spn'
    backendAzureRmResourceGroupName: 'Terraform-Backend'
    backendAzureRmStorageAccountName: 'terraformbackendshubh'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'terraform.tfstate'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/modules'
    backendServiceArm: 'azure-spn'
    backendAzureRmResourceGroupName: 'Terraform-Backend'
    backendAzureRmStorageAccountName: 'terraformbackendshubh'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'terraform.tfstate'
    environmentServiceNameAzureRM: 'azure-spn'

- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    backendServiceArm: 'azure-spn'
    backendAzureRmResourceGroupName: 'Terraform-Backend'
    backendAzureRmStorageAccountName: 'terraformbackendshubh'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'terraform.tfstate'
    commandOptions: '-auto-approve'
    environmentServiceNameAzureRM: 'azure-spn'
